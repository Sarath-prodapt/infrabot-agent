version: '3.8'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./milvus/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://milvus-etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - infrabot-net

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./milvus/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - infrabot-net

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.5
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin
    volumes:
      - ./milvus/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - infrabot-net

  backend:
    container_name: infrabot-backend
    build:
      context: ./infrabot-backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - BACKEND_URL=http://backend:8000
      - LOG_LEVEL=INFO
      - MILVUS_COLLECTION_NAME=infrabot_knowledgebase
      - AZURE_OPENAI_ENDPOINT="https://prodapt-it-open-ai-services.openai.azure.com/"
      - AZURE_OPENAI_API_KEY="3BZzAugWites0ZXSThCXarjTEbnx0wnuTS2IwbudDhRz9Ic8INy3JQQJ99BFACYeBjFXJ3w3AAABACOGnOKK"
      - AZURE_OPENAI_DEPLOYMENT="o3-mini"
      - AZURE_OPENAI_API_VERSION="2024-12-01-preview"
      - AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME="text-embedding-3-large"
      - AZURE_OPENAI_EMBEDDING_MODEL_NAME="text-embedding-3-large"
      - OPENAI_MODEL_NAME="o3-mini"
      - DEBUG=False
      - PYTHONUNBUFFERED=1
      - MILVUS_URI=http://milvus:19530
      - MILVUS_TIMEOUT=60
      - MILVUS_RETRY_ATTEMPTS=60
      - CORS_ORIGINS=http://localhost:3000
      - FRONTEND_URL=http://localhost:3000
      - ALLOWED_HOSTS=backend,localhost
    depends_on:
      milvus:
        condition: service_healthy
    networks:
      - infrabot-net

  frontend:
    container_name: infrabot-frontend
    build:
      context: ./infrabot-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8000
      - HOSTNAME=0.0.0.0
      - PORT=3000
    depends_on:
      - backend
    networks:
      - infrabot-net

networks:
  infrabot-net:
    name: infrabot-net
